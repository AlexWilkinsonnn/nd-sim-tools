#! /usr/bin/env bash

export b0=`basename $0`
sargs="$@"

# defaults

export EXITCODE=0
export VERBOSITY=1
export DOCOPY=true
export FLUXDIR="local_flux_files"
export FCLFILE=""
export FULLPATTERNS=""
export USEDK2NU=false
export FLAVOR="neutrino"
export BASE="ref_01"
export CFG="near/nominal"
export MAXSIZEMB=2000
export RELEASE=""
export DEFAULT_SEARCH_PATH=/pnfs/dune/persistent/TaskForce_Flux
export FLXFILE_SEARCH_PATH=${DEFAULT_SEARCH_PATH}
export USEEGREP=true

##########################################################################
#
##########################################################################
usage() {
cat >&2 <<EOF

${b0} [--dk2nu] [ -o local_flux_files ] -f neutrino -b ref_01 \ 
      [ --cfg "near/nominal" ] [ --max 2000 ]  

Create a subdirectory <local_flux_files> and populate it with the DUNE NearDet
Task Force approved flux files from: ${DEFAULT_SEARCH_PATH}
Limit selection to the the space consideration that the "MaxFluxFileMB" 
parameter would impose if it were being done internally to nutools/GENIEHelper.

Assumes DUNE release is already setup (and that "ifdh" commands are available)
 
   -h | --help                   print this message and quite
   -o | --outpath   FLUXDIR      output sub-directory (relative to ".")
                                 [${FLUXDIR}]
   -m | --maxmb     MAXSIZEMB    maximum size (in MB) [${MAXSIZEMB}]
   -p | --pattern   FULLPATTERNS file pattern (comma separated list)
                                 [${FULLPATTERNS}]
   --dk2nu                       override default 'gsimple' assumption
   -f | --flavor    neutrino|antineutrino|nu|anu
                                 [${FLAVOR}]
   -b | --base      ref_01       beamline configuration [ref_01|opt_01]
                                 [${BASE}]
   -c | --cfg
   -t | --test                   test mode: do all but actual copy of files
   -e | --egrep     [true|false] use "egrep" [${USEEGREP}]
   -v                            increase verbosity

   --top                         stem of search path for files
                                 [${FLXFILE_SEARCH_PATH}]

EOF
##### not supported in this version
##
##   -F | --fcl       FCL.fcl      fcl file that specifies pattern + max size
##                                 [${FCLFILE}]

}


exit_with_status() {
  export EXITCODE=$1
  echo "${b0}: $2, exit $EXITCODE"
  echo "${b0}: $2, exit $EXITCODE" >&2
  exit $EXITCODE
}

print_config() {
echo "${b0} configuration:"
echo "   FLUXDIR:      ${FLUXDIR}"
echo "   ${FLXFILE_SEARCH_PATH}"
echo "   BASE:         ${BASE}"
echo "   FLAVOR:       ${FLAVOR}"
if [ "$USEDK2NU" == "false" ]; then
  echo "   gsimple CFG:  ${CFG}"
else
  echo "   dk2nu"
fi
echo "   FULLPATTERNS: ${FULLPATTERNS}"
echo "   MAXSIZEMB:    ${MAXSIZEMB}"
echo "   DOCOPY:       ${DOCOPY}"
echo " "
}


regularize_trueorfalse() {
  VAR=$1  # name of the variable
  VALDEFAULT=$2
  # lower case value so tests are easier
  VAL=`echo ${!VAR} | tr [A-Z] [a-z]` 
  # if the default is unset then take true as default
  if [ -z "${VALDEFAULT}" ]; then VALDEFAULT="true"    ; fi
  # if value is unset then take the default
  # use this default also if value doesn't conform to any allowed values
  if [ -z "${VAL}"        ]; then ${VAR}=${VALDEFAULT} ; fi
  if [ $VERBOSITY -gt 1 ]; then echo "currently $VAR is ${VAL} ${!VAR}" ; fi
    case "${VAL}" in
    1 | true  | yes | on  ) export ${VAR}="true"  ;;
    0 | false | no  | off ) export ${VAR}="false" ;;
    * ) echo "${var} was unexpected \"$:val}\", using \"${VALDEFAULT}\"" ; 
          export ${VAR}="${VALDEFAULT}"
          ;;
  esac
  if [ $VERBOSITY -gt 1 ]; then echo "finally $VAR is ${VAL} ${!VAR}" ; fi
}


##########################################################################

process_args() {
  TEMP=`getopt -n $0 -s bash -a \
     --longoptions="help output: fcl: maxmb: pattern: dk2nu flavor: base: cfg: test egrep: top:" \
     -o ho:F:m:p:f:b:c:te:v-: -- "$@" `
  eval set -- "${TEMP}"
  while [ $# -gt 0 ]; do
    case "$1" in
      "--"             ) shift;                 break  ;;
      -h | --help      ) usage;                 exit 0 ;;
      -o | --output    ) FLUXDIR=$2;            shift  ;;
      -F | --fcl       ) FCLFILE=$2;            shift  ;;
      -m | --maxmb     ) MAXSIZEMB="$2";        shift  ;;
      -p | --pattern   ) FULLPATTERNS=$2;       shift  ;;
           --dk2nu     ) USEDK2NU=true                 ;;
      -f | --flavor    ) FLAVOR="$2";           shift  ;;
      -b | --base      ) BASE="$2";             shift  ;;
      -c | --cfg       ) CFG="$2";              shift  ;;
      -t | --test      ) DOCOPY=false;                 ;;
      -e | --egrep     ) USEEGREP=$2;           shift  ;;
           --top       ) FLXFILE_SEARCH_PATH="$2"; shift ;;
      -v               ) let VERBOSITY=${VERBOSITY}+1  ;;
      -*               ) echo "unknown flag $opt ($1)"
                         usage
                         ;;
     esac
     shift  # eat up the arg we just used
  done

  if [ $VERBOSITY -gt 3 ]; then
    set -o xtrace
  fi

  regularize_trueorfalse USEEGREP      true
  regularize_trueorfalse DOCOPY        true
  regularize_trueorfalse USEDK2NU      false

}

##########################################################################

process_args "$@"


COMPACTDT="`date "+%Y%m%d_%H%M%S"`"

echo " "
echo "================================================================"
echo "Start ${b0} at: `date \"+%Y-%m-%d %H:%M:%S\"`"
echo "  with args:  ${sargs}"
echo " "

if [ $VERBOSITY -gt 1 ]; then
  echo "${b0}: using IFDH `which ifdh`"
fi

print_config

echo "${b0}: currently situated at `pwd`"
echo "${b0}: mkdir -p $FLUXDIR"
mkdir -p $FLUXDIR
mkdir_status=$?
if [ ${mkdir_status} -ne 0 ]; then
  exit_with_status 1 "failed to make the output directory"
fi

# construct basic path
export REMOTEFLUXPATH=${FLXFILE_SEARCH_PATH}/${BASE}/${FLAVOR}
if [ "$USEDK2NU" == "false" ]; then
  #REMOTEFLUXPATH=${REMOTEFLUXPATH}/gsimple/${CFG}
  if [ -z "$FULLPATTERNS" ]; then 
    export FULLPATTERNS="*gsimple*.root"
  fi
else
  REMOTEFLUXPATH=${REMOTEFLUXPATH}/flux/dk2nu
  echo $REMOTEFLUXPATH
  if [ -z "$FULLPATTERNS" ]; then 
    export FULLPATTERNS="*.dk2nu.root"
  fi
fi

# master list of files
export LISTFILELOCAL=flux_${BASE}_${FLAVOR}.list

### ifdh findMatchingFiles --- is completely broken apparently
#if [ $VERBOSITY -gt 1 ]; then
#    echo "${b0}: ifdh findMatchingFiles ${FULLPATTERNS} ${REMOTEFLUXPATH}"
#fi
#ifdh findMatchingFiles "${FULLPATTERNS}" ${REMOTEFLUXPATH} > $LISTFILELOCAL
#ifdh_status=$?
#if [ ! -f $LISTFILELOCAL ]; then
#  exit_with_status 2 "failed to get LISTFILELOCAL from $LISTFILE, status $ifdh_status"
#fi

if [ $VERBOSITY -gt 1 ]; then
    echo "${b0}: ifdh lss ${REMOTEFLUXPATH}"
fi
ifdh lss ${REMOTEFLUXPATH} > $LISTFILELOCAL
ifdh_status=$?
if [ ! -f $LISTFILELOCAL ]; then
  exit_with_status 2 "failed to get LISTFILELOCAL from $LISTFILE, status $ifdh_status"
fi

if [ $VERBOSITY -gt 1 ]; then
  nlines=`wc -l $LISTFILELOCAL | cut -d' ' -f1`
  echo "${b0}: saw $nlines lines in $LISTFILELOCAL"
fi

# parse the FCL file for what is to be selected
##if [ -f $FCLFILE ]; then
##  process_fcl
##  print_config
##fi

set -o noglob   # no wildcard expansion
PATTERNLIST=`echo $FULLPATTERNS | tr ',' ' '`
set +o noglob  # restore expansion

## make a list of all matching files
## ifdh lss ==> lines like 
##     gsiftp://stkendca33a.fnal.gov/pnfs/fnal.gov/...    <size>
## where separating blank space is a tab
export MATCHLIST=${LISTFILELOCAL}.match
if [ -f $MATCHLIST ]; then rm $MATCHLIST; fi
touch $MATCHLIST

set -o noglob   # no wildcard expansion
for pattern in $PATTERNLIST ; do
    # egrep needs regex rather than glob, this does need trailing "$"
    #  * ==> .*
    #  ? ==> .
    # ranges stay the same
    # trailing $ to match end-of-line so we don't pick up blah.root.log
    # or require white space following end of the pattern
    regexpattern=`echo "${pattern}(\$|[[:space:]])" | sed -e 's/\*/\.\*/g' -e 's/\?/\./g'`
    if [ $VERBOSITY -gt 1 ]; then
      echo "${b0}: pattern $pattern regexpattern $regexpattern"
      echo "${b0}: egrep '${regexpattern}' $LISTFILELOCAL"
    fi
    egrep "${regexpattern}" $LISTFILELOCAL >> $MATCHLIST
done # loop over patterns
set +o noglob  # restore expansion

if [ $VERBOSITY -gt 2 ]; then
  echo "--begin-of-file MATCHLIST $MATCHLIST using USEEGREP=$USEEGREP"
  cat $MATCHLIST
  echo "--end-of-file $MATCHLIST"
fi
nlines=`wc -l $MATCHLIST | cut -d' ' -f1`
echo "${b0}: MATCHLIST $MATCHLIST had $nlines lines"

# okay ... have a list of matches ... now to shuffle it up
export SHUFFLELIST=${MATCHLIST}.shuffle
if [ -f $SHUFFLELIST ]; then rm $SHUFFLELIST; fi
touch $SHUFFLELIST

# we'll use the "shuf" command to mix things up
# this _should_ be installed by default as part of the core tools
# (like cut and sort, etc...)
echo "which shuf"
which shuf 2>/dev/null
shuf_missing=$?
if [ ${shuf_missing} -gt 0 ]; then
  exit_with_status 4 "the \"shuf\" command seems to be missing"
fi
echo shuf -o $SHUFFLELIST $MATCHLIST
shuf -o $SHUFFLELIST $MATCHLIST
echo " "

# start pulling files until we read the limit
# this is where it is important the exact layout of the line
## ifdh lss ==> lines like 
##     gsiftp://stkendca33a.fnal.gov/pnfs/fnal.gov/...    <size>
## where separating blank space is a tab

SUMMB=0
NFILES=0
let round=1023*1024
let b2mb=1024*1024
while read line ; do
  # quote "$line" to retain \t, 'cut' defaults to \t as separator
  fname=`echo "$line" | cut -f1`
  bytes=`echo "$line" | cut -f2`
  let filemb=(bytes+round)/b2mb
  let summbtest=SUMMB+filemb
  if [ $VERBOSITY -gt 2 ]; then
    echo "line:  ${line}"
    echo "fname: \"${fname}\""
    echo "bytes $bytes filemb $filemb summbtest $summbtest "
  fi
  # quit if the next would exceed our limit, but require at least one
  if [ $SUMMB -gt 0 -a $summbtest -gt $MAXSIZEMB ]; then
    echo "${b0}: file # $NFILES would exceed MAXSIZEMB limit $MAXSIZEMB (now ${SUMMB}, would be ${summbtest})"
    break;
  fi
  
  bname=`basename $fname`
  if [ "$DOCOPY" == "true" ]; then
      if [ $VERBOSITY -gt 1 ]; then
        echo "${b0}: ifdh cp $fname $FLUXDIR/$bname"
      fi
      ifdh cp $fname $FLUXDIR/$bname
      ifdh_status=$?
      if [ $VERBOSITY -gt 1 ]; then
        echo "${b0}: ifdh cp $fname $FLUXDIR/$bname status ${ifdh_status}"
      fi
  else
      echo "$b0 test mode: skip ifdh cp $fname $FLUXDIR/$bname"
  fi
  SUMMB=$summbtest
  let NFILES=NFILES+1
done < $SHUFFLELIST
echo "copied $NFILES files"

if [ $VERBOSITY -gt 0 ]; then
  echo "--begin ls -l $FLUXDIR"
  ls -l $FLUXDIR
  echo "--end ls"
fi

echo " "
echo "Copy complete at: `date \"+%Y-%m-%d %H:%M:%S\" ` "
echo "================================================================"

exit_with_status 0 "success"
# end-of-script

###########################################################################

process_fcl() {
  # use NOvA application to process fcl file to weed down to what
  # truly _are_ the parameters
  echo "copy $FCLFILE to ./unparsed.fcl"
  fclbase=`basename $FCLFILE`
  if [ -f $fclbase ]; then
    cp $FCLFILE ./unparsed.fcl
  else
    echo " "
    ifdh cp $FCLFILE ./unparsed.fcl
    echo " "  # lots of noise
  fi
  if [ ! -f ./unparsed.fcl ]; then
    exit_with_status 3 "failed to get $FCLFILE as ./unparsed.fcl"
  fi
  echo ART_DEBUG_CONFIG=fully_parsed.fcl nova -c unparsed.fcl
       ART_DEBUG_CONFIG=fully_parsed.fcl nova -c unparsed.fcl
  # fcl doesn't necessarily explicitly set MaxFluxFileMB anywhere
  altmaxmb=`grep MaxFluxFileMB: fully_parsed.fcl | cut -d':' -f2`
  if [ -n "${altmaxmb}" ]; then
    echo "update MAXSIZEMB from FCL file ${MAXSIZEMB} to ${altmaxmb}"
    MAXSIZEMB=${altmaxmb}
  fi
  # FluxFiles might looks like:
  #   FluxFiles: [ "/path1/pattern1"
  #              , "/path2/pattern2"
  #              ]
  # we want all the lines up to the "]"
  # need to distinguish between fcl [] vector delimiter and
  # range wildcard globbing e.g. [0-9]; the former should have a space
  # before them, the globbing will be embedded in a name
  fluxfilelist=`grep -A1000 FluxFiles: fully_parsed.fcl | \
                 tr "\n" " " | sed -e 's/ \[/@/g' -e 's/ \]/@/g' | \
                 cut -d'@' -f2 | tr '," ''' ' ' | tr -s ' '`
  fluxsearchpaths=`grep FluxSearchPaths: fully_parsed.fcl | cut -d':' -f2 | \
                   tr ':" ''' ' ' | tr -s ' '`
  if [ -z "$fluxsearchpaths" -o "$fluxsearchpaths" == " " ]; then
    if [ $VERBOSITY -gt 1 ]; then echo "${b0}: using DEFAULT_SEARCH_PATH"; fi
    fluxsearchpaths=${DEFAULT_SEARCH_PATH}
  fi
  if [ $VERBOSITY -gt 1 ]; then
    echo "fluxfiles: $fluxfilelist"
    echo "fluxsearchpaths:  $fluxsearchpaths"
  fi

  for sp in $fluxsearchpaths ; do
    if [ -z "$sp" ]; then continue; fi
    for ff in $fluxfilelist ; do
      # special case where we do want substitution (but not globbing)
      SEDCMD="sed -e s/\${NOVA_FLUX_VERSION}/${NOVA_FLUX_VERSION}/g "
      echo "SEDCMD=$SEDCMD"
      set -o noglob   # no wildcard expansion
      # remove any accidental //
      full=`echo ${sp}/${ff} | tr -s '/' | $SEDCMD `
      if [ $VERBOSITY -gt 1 ]; then echo "constructed $full"; fi
      if [ -z "$FULLPATTERNS" ]; then 
        FULLPATTERNS="${full}"
      else
        FULLPATTERNS="${FULLPATTERNS},${full}"
      fi
      set +o noglob  # restore expansion
    done
  done
 
  echo " "
}

